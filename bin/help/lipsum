#!/usr/bin/env node

/**
 *  Example program to test help column alignment.
 *
 *  ./bin/help/lipsum
 *  ./bin/help/lipsum --no-color
 *  ./bin/help/lipsum --sort null
 *  ./bin/help/lipsum --sort false
 *  ./bin/help/lipsum --sort true
 */
var fs = require('fs');
var path = require('path');
var convert = require('cli-native');
var pkg = path.normalize(
  path.join(__dirname, '..', '..', 'package.json'));
var package = require(pkg);
package.bugs.email = '<lorem@example.com>';
var cli = require('../..'), help = cli.help;
var description = "Lorem ipsum is a program used to test help output.";
var sections = {};
var lipsum = '' + fs.readFileSync(path.join(__dirname, 'lipsum.txt'));
var paragraphs = lipsum.split('\n\n');
sections.examples = [
  {
    name: 'lipsum -j',
    description: 'Print help as JSON'
  },
  {
    name: 'lipsum --sort null',
    description: 'Disable help option sort (natural order)'
  },
  {
    name: 'lipsum --sort false',
    description: 'Use default sort order'
  },
  {
    name: 'lipsum --sort true',
    description: 'Use lexicographic sort order'
  },
  {
    name: 'lipsum --sort 1',
    description: 'Sort by length of option (longest first)'
  },
  {
    name: 'lipsum --sort -1',
    description: 'Sort by length of option (shortest first)'
  },
  {
    name: 'lipsum --no-color',
    description: 'Disable ansi colors'
  },
]

var list = [null, true, false, 1, -1];
var sort = 'Alters the help option sort order. '
sort += 'Set to null to use natural order which ';
sort += 'is likely the order that options were declared in however this is not ';
sort += 'guaranteed. Use false for the default sorting logic which favours ';
sort += 'options with more names, use true to sort lexicographically ';
sort += '(Array.prototype.sort). Use 1 to sort by option string length ';
sort += '(determined by the length of the help option string), reverse the ';
sort += 'order with -1.';

var stash = {};
var program = cli(package, 'lipsum', description)
  .configure({stash: stash, help: {sections: sections}})
  .use(cli.middleware.color)
  .use(cli.middleware.debug)
  .option('-j, --json', 'Print help as json')
  .option('-e, --exit', 'Include exit section from error definitions')
  .option('-s, --sort [value]', sort, cli.types.enum(list, true))
  .option('-a, --align [value]',
    'Alignment style (column|line|flex|wrap)',
    cli.types.enum(['column', 'line', 'flex', 'wrap']))
  .option('-m, --maximum [value]',
    'Maximum column width, default 80',
    cli.types.integer)
  .option('-L, --lorem-ipsum-dolor[=VALUE]', 'Lorem ipsum dolor')
  .option('-i, --ipsum [VALUE]', 'Ipsum dolor sit amet')
  .option('--mauris-pulvinar, --ut-bibendum=[VALUE]', 'Mauris pulvinar')
  .option('-a, --aliquam [VALUE]', paragraphs[2])
  .once('json', function(req, arg, value) {
    if(value) {
      process.env.CLI_TOOLKIT_HELP_JSON=true;
      process.env.CLI_TOOLKIT_HELP_JSON_INDENT=2;
    }
  })
  .once('maximum', function(req, arg, value) {
    this.configure().help.maximum = parseInt(value);
  })
  .once('exit', function(req, arg, value) {
    this.configure().help.exit = value;
  })
  .once('sort', function(req, arg, value) {
    this.configure().help.sort = convert.to(value);
  })
  .once('align', function(req, arg, value) {
    this.configure().help.align = value;
  })
  .help()
  .version()
  .on('complete', function(req) {
    help.call(this);
  });

paragraphs.forEach(function(para) {
  var cmd = para.replace(/\s+.*/, '').trim().toLowerCase();
  var desc = para.substr(0, para.indexOf('.') + 1);
  program.command(cmd, desc);
  //console.dir(desc);
})

program.parse();
